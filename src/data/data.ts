export const PostsBlog = [
    {
      id: "React-Native-and-Expo",
      title: "React Native and Expo",
      author: "John",
      date: "4 Mar 2021",
      content:
        "Expo is an open-source platform for making universal native apps for Android, iOS, and the web with JavaScript and React.With Expo tools, services, and React, you can build, deploy, and quickly iterate on native Android, iOS, and web apps from the same JavaScript codebase.Access to device capabilities like camera, location, notifications, sensors, haptics, and much more, all with universal APIs.Build service gives you app-store ready binaries and handles certificates, no need for you to touch Xcode or Android Studio.Over-the-air updates let you update your app at any time without the hassle and delays of submitting to the store.",
    },
    {
      id: "Why-do-we-love-Next.js",
      title: "Why do we love Next.js ?",
      author: "Witold Ossera",
      date: "11 Apr 2021",
      content:
      "The Next.js frontend framework has been around for only a couple years, but it is already one of the most popular tools in the React ecosystem. As big React users ourselves, we also love it and use it a lot in our everyday work. In this article, we’re going to show you why and how Next.js can improve the performance, UX and SEO of your app. We’re also going to discuss the best kinds of projects for Next.js and various ways to acquire developers skilled in Next.js.Did you know that over 50 percent of all respondents of our State of Frontend 2020 report admitted to using Next.js in their projects? This makes Next.js one of the most ubiquitous pieces of software in modern frontend development next to the likes of React, Vue or jQuery. We’re soon going to go over the reasons behind this popularity. But first, let’s get one thing out  of the way.We love Next.js. At The Software House, we really like working with Next.js. To the point that it is one of the technologies listed in our Technology Radar in the “Common” category. As it says, these technologies are “our bread and butter.” This means that we believe in them and consider them to have great potential for the future as well and as a result, we made a big part of our technology stack. A big reason for that is the fact that Next.js is built on top of React – a frontend development library for building user interfaces, which is our first choice when it comes to web applications.But it wouldn’t be enough if Next.js wasn’t really good at what it does… right – so what does it do exactly!? In order to explain it, we need to go over a couple terms."
    },
    {
      id: "Why-did-we-build-React",
      title: "Why did we build React?",
      author: "Pete Hunt",
      date: "16 Aug 2021",
      content:
        "here are a lot of JavaScript MVC frameworks out there. Why did we build React and why would you want to use it?React isn’t an MVC framework. React is a library for building composable user interfaces. It encourages the creation of reusable UI components which present data that changes over time.React doesn’t use templates.Traditionally, web application UIs are built using templates or HTML directives. These templates dictate the full set of abstractions that you are allowed to use to build your UI.React approaches building user interfaces differently by breaking them into components. This means React uses a real, full featured programming language to render views, which we see as an advantage over templates for a few reasons:JavaScript is a flexible, powerful programming language with the ability to build abstractions. This is incredibly important in large applications. By unifying your markup with its corresponding view logic, React can actually make views easier to extend and maintain. By baking an understanding of markup and content into JavaScript, there’s no manual string concatenation and therefore less surface area for XSS vulnerabilities. We’ve also created JSX, an optional syntax extension, in case you prefer the readability of HTML to raw JavaScript.Reactive updates are dead simple. React really shines when your data changes over time.In a traditional JavaScript application, you need to look at what data changed and imperatively make changes to the DOM to keep it up-to-date. Even AngularJS, which provides a declarative interface via directives and data binding requires a linking function to manually update DOM nodes.React takes a different approach.When your component is first initialized, the render method is called, generating a lightweight representation of your view. From that representation, a string of markup is produced, and injected into the document. When your data changes, the render method is called again. In order to perform updates as efficiently as possible, we diff the return value from the previous call to render with the new one, and generate a minimal set of changes to be applied to the DOM.The data returned from render is neither a string nor a DOM node — it’s a lightweight description of what the DOM should look like.We call this process reconciliation. Check out this jsFiddle to see an example of reconciliation in action.Because this re-render is so fast (around 1ms for TodoMVC), the developer doesn’t need to explicitly specify data bindings. We’ve found this approach makes it easier to build apps.HTML is just the beginning. Because React has its own lightweight representation of the document, we can do some pretty cool things with it:Facebook has dynamic charts that render to <canvas> instead of HTML. Instagram is a “single page” web app built entirely with React and Backbone.Router. Designers regularly contribute React code with JSX. We’ve built internal prototypes that run React apps in a web worker and use React to drive native iOS views via an Objective-C bridge.You can run React on the server for SEO, performance, code sharing and overall flexibility. Events behave in a consistent, standards-compliant way in all browsers (including IE8) and automatically use event delegation.Head on over to https://reactjs.org to check out what we have built. Our documentation is geared towards building apps with the framework, but if you are interested in the nuts and bolts get in touch with us!Thanks for reading!"
    },
  ];